generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlatformType {
  SPOTIFY
  APPLE_MUSIC
  SOUNDCLOUD
}

model Artist {
  id           Int      @id @default(autoincrement())
  // -- metadata
  email        String   @unique
  name         String
  passwordHash Bytes
  createdAt    DateTime @default(now())

  // -- campaigns and customization
  campaigns Campaign[]
  links     Json
}

model Campaign {
  id         Int      @id @default(autoincrement())
  // -- metadata
  artist     Artist   @relation(fields: [artistId], references: [id])
  artistId   Int
  createdAt  DateTime @default(now())
  executesAt DateTime

  // -- customization
  slug  String @unique
  links Json // [{"type": "link", "text": "Buy on bandcamp", "link": "https://lfav.bandcamp.com/album/isomorph"}]

  platforms PlatformCampaign[]
}

enum QueryType {
  ISRC
  UPC
  URL
}

enum CampaignState {
  PENDING
  SUCCESS
  FAILURE
}

//  for each campaign: one of these represents platform-specific data per platform.
model PlatformCampaign {
  id         Int      @id @default(autoincrement())
  // -- backref
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId Int

  platform PlatformType

  // -- what do we need to do to find the song?
  query     String
  queryType QueryType

  // campaign execution state
  state    CampaignState
  // presaves on this platform for the campaign
  presaves Presave[]
}

model Presave {
  id                 Int              @id @default(autoincrement())
  // for erin to care about
  platformCampaign   PlatformCampaign @relation(fields: [platformCampaignId], references: [id])
  platformCampaignId Int
}
